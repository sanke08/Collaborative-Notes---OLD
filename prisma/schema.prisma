// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @unique @default(cuid())
  name         String
  email        String
  password     String
  WorkSpaces   WorkSpace[]
  Collabration Collabration[]
}

model WorkSpace {
  id               String         @unique @default(cuid())
  title            String
  iconId           String         @default("")
  data             String         @default("")
  inTrash          Boolean        @default(false)
  isPrivate        Boolean        @default(true)
  logo             String         @default("")
  bannerUrl        String         @default("")
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  workSpaceOwnerId String
  workSpaceOwner   User           @relation(fields: [workSpaceOwnerId], references: [id])
  Folders          Folder[]
  Files            File[]
  Collabrations    Collabration[]
}

model Folder {
  id          String    @unique @default(cuid())
  title       String
  iconId      String    @default("")
  inTrash     Boolean   @default(false)
  logo        String    @default("")
   data             String         @default("")
  bannerUrl   String    @default("")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workSpaceId String
  workSpace   WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  Files       File[]
}

model File {
  id          String    @unique @default(cuid())
  title       String
  iconId      String    @default("")
  inTrash     Boolean   @default(false)
  logo        String    @default("")
  bannerUrl   String    @default("")
   data             String         @default("")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  folderId    String
  Folders     Folder    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  workSpaceId String
  workSpace   WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
}

model Collabration {
  id          String    @unique @default(cuid())
  workSpaceId String
  workSpace   WorkSpace @relation(fields: [workSpaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
